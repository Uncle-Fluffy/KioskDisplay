---
- name: Base setup on all hosts
  hosts: all
  become: yes
  vars:
    ansible_user: tcarter
    slideshow_script_local: "../files/start-slideshow.sh"  # Relative path to start-slideshow.sh
    slideshow_script_remote: "/home/{{ ansible_user }}/start-slideshow.sh"
    systemd_service_local: "../files/fbi-slideshow.service"  # Relative path to fbi-slideshow.service
    systemd_service_remote: "/etc/systemd/system/fbi-slideshow.service"

  tasks:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Upgrade all packages
      ansible.builtin.apt:
        upgrade: dist

    - name: Autoremove unnecessary packages
      ansible.builtin.apt:
        autoremove: yes

    - name: Install fbi
      ansible.builtin.apt:
        name: fbi
        state: present

    - name: Install jq
      ansible.builtin.apt:
        name: jq
        state: present

    - name: Create dimmed directories for evening and night
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/Pictures/{{ item }}"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}" # Or the primary group of ansible_user
      loop:
        - evening
        - night

    - name: Check if lightdm.service is active
      ansible.builtin.command: "systemctl is-active lightdm.service"
      register: dm_status
      changed_when: false
      failed_when: false
      check_mode: no

    - name: Stop and disable lightdm.service if active
      ansible.builtin.systemd:
        name: lightdm.service # Hardcoded directly
        state: stopped
        enabled: no
      when: dm_status.stdout == "active"
      notify: Reboot Pi for display manager change

    - name: Ensure system boots to multi-user target (no GUI)
      ansible.builtin.command: systemctl set-default multi-user.target
      when: ansible_facts['os_family'] == 'Debian'

    - name: Copy start-slideshow.sh script to remote
      ansible.builtin.copy:
        src: "{{ slideshow_script_local }}"
        dest: "{{ slideshow_script_remote }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Copy systemd service to enable fbi slideshow
      ansible.builtin.copy:
        src: "{{ systemd_service_local }}"
        dest: "{{ systemd_service_remote }}"
        owner: root
        group: root
        mode: '0644'
      notify: Restart fbi-slideshow

    - name: Enable fbi-slideshow service
      ansible.builtin.systemd:
        name: fbi-slideshow
        enabled: yes

    - name: Start fbi-slideshow service
      ansible.builtin.systemd:
        name: fbi-slideshow
        state: started

  handlers: # Add this section at the end of your playbook (same indentation level as 'tasks')
    - name: Restart fbi-slideshow
      ansible.builtin.systemd:
        name: fbi-slideshow
        state: restarted
        daemon_reload: yes

    - name: Reboot Pi for display manager change
      listen: "Reboot Pi for display manager change"
      ansible.builtin.reboot:
        msg: "Rebooting Pi to apply display manager change (boot to CLI)."
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
# -----------------------------------------------------
# To execute this playbook:
# - To run on all hosts listed in the hosts.ini file:
#   ansible-playbook playbooks/base_setup.yml
#
# - To run on a specific host:
#   ansible-playbook playbooks/base_setup.yml --limit <target_ip>
#
# If the fbi-slideshow service doesn't start on reboot:
# - Make sure the service is enabled
#   sudo systemctl status fbi-slideshow
# - If it's not enabled, to enable and start on boot:
#   sudo systemctl enable fbi-slideshow
# - If it is enabled, try restarting the services
#   sudo systemctl restart fbi-slideshow
# - If it still doesn't start, check logs for issues:
#   sudo journalctl -u fbi-slideshow
#   This will provide detailed logs of the service's behavior.
#
# To execute the start-slideshow.sh script directly, run:
#   sudo ./start-slideshow.sh
#