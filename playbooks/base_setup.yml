---
- name: Base setup on all hosts
  hosts: all
  become: true
  vars:
    ansible_user: tcarter
    slideshow_script_local: "../files/start-slideshow.sh"  # Relative path to start-slideshow.sh
    slideshow_script_remote: "/home/{{ ansible_user }}/start-slideshow.sh"
    systemd_service_local: "../files/fbi-slideshow.service"  # Relative path to fbi-slideshow.service
    systemd_service_remote: "/etc/systemd/system/fbi-slideshow.service"
    watchdog_interface: "wlan0"       # Change to 'eth0' if using wired

  tasks:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600

    - name: Upgrade all packages
      ansible.builtin.apt:
        upgrade: dist

    - name: Autoremove unnecessary packages
      ansible.builtin.apt:
        autoremove: true

    - name: Install essential packages (fbi, jq, watchdog)
      ansible.builtin.apt:
        name:
          - fbi
          - jq
          - watchdog
        state: present

    - name: Grant bash the CAP_NET_RAW capability for watchdog script
      ansible.builtin.command:
        cmd: setcap cap_net_raw=+ep /bin/bash

    - name: Disable wd_keepalive to prevent shutdown conflicts
      ansible.builtin.lineinfile:
        path: /etc/default/watchdog
        regexp: '^run_wd_keepalive='
        line: 'run_wd_keepalive=0'
      notify: Reload daemon and restart watchdog

    - name: Create systemd drop-in directory for watchdog service
      ansible.builtin.file:
        path: /etc/systemd/system/watchdog.service.d
        state: directory
        mode: '0755'

    - name: Copy watchdog service override to delay start until time is synced
      ansible.builtin.copy:
        src: ../files/systemd/watchdog.service.d/override.conf
        dest: /etc/systemd/system/watchdog.service.d/override.conf
        mode: '0644'
      notify: Reload daemon and restart watchdog

    - name: Copy dynamic network check script for watchdog
      ansible.builtin.copy:
        src: ../files/check-network.sh
        dest: /usr/local/bin/check-network.sh
        mode: '0755'

    - name: Configure watchdog service from template
      ansible.builtin.template:
        src: ../templates/watchdog.conf.j2
        dest: /etc/watchdog.conf
        mode: '0644'
      notify: Reload daemon and restart watchdog

    - name: Enable hardware watchdog in boot config
      ansible.builtin.lineinfile:
        path: /boot/firmware/config.txt
        regexp: '^dtparam=watchdog='
        line: 'dtparam=watchdog=on'
      notify: Reboot Pi

    - name: Enable watchdog service
      ansible.builtin.systemd:
        name: watchdog
        enabled: true
        state: stopped

    - name: Create dimmed directories for evening and night
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/Pictures/{{ item }}"
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}" # Or the primary group of ansible_user
      loop:
        - evening
        - night

    - name: Check if lightdm.service is active
      ansible.builtin.command: "systemctl is-active lightdm.service"
      register: dm_status
      changed_when: false
      failed_when: false
      check_mode: false

    - name: Stop and disable lightdm.service if active
      ansible.builtin.systemd:
        name: lightdm.service # Hardcoded directly
        state: stopped
        enabled: false
      when: dm_status.stdout == "active"
      notify: Reboot Pi

    - name: Ensure system boots to multi-user target (no GUI)
      ansible.builtin.command: systemctl set-default multi-user.target
      when: ansible_facts['os_family'] == 'Debian'

    - name: Copy start-slideshow.sh script to remote
      ansible.builtin.copy:
        src: "{{ slideshow_script_local }}"
        dest: "{{ slideshow_script_remote }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Copy systemd service to enable fbi slideshow
      ansible.builtin.copy:
        src: "{{ systemd_service_local }}"
        dest: "{{ systemd_service_remote }}"
        owner: root
        group: root
        mode: '0644'
      notify: Restart fbi-slideshow

    - name: Force systemd to reload daemon immediately to recognize changes
      ansible.builtin.systemd:
        daemon_reload: true
      when: ansible_check_mode == false

    - name: Enable and start fbi-slideshow service
      ansible.builtin.systemd:
        name: fbi-slideshow
        enabled: true
        state: restarted

  handlers:
    - name: Reload daemon and restart watchdog
      ansible.builtin.systemd:
        name: watchdog
        state: restarted
        daemon_reload: true

    - name: Restart fbi-slideshow
      ansible.builtin.systemd:
        name: fbi-slideshow
        state: restarted
        daemon_reload: true

    - name: Reboot Pi
      ansible.builtin.reboot:
        msg: "Rebooting Pi to apply critical configuration changes."
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
# -----------------------------------------------------
# To execute this playbook:
# - To run on all hosts listed in the hosts.ini file:
#   ansible-playbook playbooks/base_setup.yml
#
# - To run on a specific host:
#   ansible-playbook playbooks/base_setup.yml --limit <target_ip>
#
# If the fbi-slideshow service doesn't start on reboot:
# - Make sure the service is enabled
#   sudo systemctl status fbi-slideshow
# - If it's not enabled, to enable and start on boot:
#   sudo systemctl enable fbi-slideshow
# - If it is enabled, try restarting the services
#   sudo systemctl restart fbi-slideshow
# - If it still doesn't start, check logs for issues:
#   sudo journalctl -u fbi-slideshow
#   This will provide detailed logs of the service's behavior.
#
# To execute the start-slideshow.sh script directly, run:
#   sudo ./start-slideshow.sh
#
# Watchdog
# To test watchdog do this on the target host and wait a minute
# sudo ip link set wlan0 down
# should reboot on it's own
